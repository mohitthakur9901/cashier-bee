// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  phone         Int
  username      String     @unique
  password      String
  role          Role
  createdAt     DateTime   @default(now())
  restaurantId  Int        @unique // Each user can manage only one restaurant
  store          Restaurant @relation(fields: [restaurantId], references: [id])
}

model Restaurant {
  id          Int         @id @default(autoincrement())
  name        String
  address     String?
  phone       String?
  createdAt   DateTime    @default(now())
  menuItems   MenuItem[]
  orders      Order[]
  payments    Payment[]  
  users       User[]     
}

model MenuItem {
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  name         String
  description  String?
  price        Float
  category     String?
  isAvailable  Boolean    @default(true)
  createdAt    DateTime   @default(now())
  orderItems   OrderItem[]
}

model Order {
  id           Int         @id @default(autoincrement())
  userId       Int?
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  total        Float
  status       OnRampStatus
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]
  payment      Payment?
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId Int
  quantity   Int
  price      Float
}

model Payment {
  id            Int      @id @default(autoincrement())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       Int      @unique
  paymentStatus OnRampStatus
  paymentAmount Float
  paymentDate   DateTime @default(now())
  Restaurant Restaurant[]
}

enum Role {
  user
  admin
}

enum OnRampStatus {
  Success
  Failure
  Processing
}